# Generated by Django 2.2.4 on 2019-08-13 10:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import uuid


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# app.migrations.0038_alter_link_type_and_fill_with_defaults

def fill_default_to_existing_records(apps, schema_editor):
    SourceLink = apps.get_model('app', 'SourceLink')
    db_alias = schema_editor.connection.alias
    for source_link in SourceLink.objects.using(db_alias).all():
        if not source_link.link_type:
            source_link.link_type = 1  # External
            source_link.save(update_fields=['link_type'])


class Migration(migrations.Migration):

    replaces = [('app', '0001_initial'), ('app', '0002_auto_20181009_0835'), ('app', '0003_auto_20181009_1028'), ('app', '0004_auto_20181010_0826'), ('app', '0005_auto_20181010_0833'), ('app', '0006_auto_20190307_1600'), ('app', '0007_profile'), ('app', '0008_auto_20190604_1336'), ('app', '0009_auto_20190613_1452'), ('app', '0010_auto_20190617_1603'), ('app', '0011_datagrouping_dataset_responsibleperson_sourcelink_sourceschema_sourcetables'), ('app', '0012_remove_datagrouping_audience'), ('app', '0012_auto_20190621_0805'), ('app', '0013_merge_20190621_0847'), ('app', '0014_delete_responsibleperson'), ('app', '0015_auto_20190624_1527'), ('app', '0016_delete_sourcetables'), ('app', '0017_remove_privilage_tables'), ('app', '0018_auto_20190626_1057'), ('app', '0019_auto_20190705_1257'), ('app', '0020_delete_privilage'), ('app', '0021_sourcetable'), ('app', '0022_auto_20190709_1203'), ('app', '0023_delete_sourceschema'), ('app', '0024_referencedataset_referencedatasetfield'), ('app', '0025_auto_20190712_1213'), ('app', '0026_auto_20190712_1333'), ('app', '0027_auto_20190717_1035'), ('app', '0028_auto_20190717_1320'), ('app', '0027_auto_20190717_1122'), ('app', '0029_merge_20190717_1328'), ('app', '0030_auto_20190717_1450'), ('app', '0031_auto_20190718_0906'), ('app', '0032_auto_20190719_1643'), ('app', '0033_referencedataset_schema_version'), ('app', '0034_auto_20190727_1710'), ('app', '0035_auto_20190728_0641'), ('app', '0034_auto_20190725_1510'), ('app', '0036_merge_20190806_0827'), ('app', '0035_sourcelink_link_type'), ('app', '0037_merge_20190807_1109'), ('app', '0038_alter_link_type_and_fill_with_defaults')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('memorable_name', models.CharField(help_text='Must match the set of environment variables starting with DATA_DB__[memorable_name]__', max_length=128, validators=[django.core.validators.RegexValidator(regex='[A-Za-z0-9_]')])),
                ('is_public', models.BooleanField(default=False, help_text='If public, the same credentials for the database will be shared with each user. If not public, each user must be explicilty given access, and temporary credentials will be created for each.')),
            ],
        ),
        migrations.CreateModel(
            name='Privilage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('tables', models.CharField(help_text='Comma-separated list of tables that can be accessed on this database. "ALL TABLES" (without quotes) to allow access to all tables', max_length=1024, validators=[django.core.validators.RegexValidator(regex='(^([a-z][a-z0-9_]*,?)+(?<!,)$)|(^ALL TABLES$)')])),
                ('database', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Database')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='privilage',
            index=models.Index(fields=['user'], name='app_privila_user_id_3e8176_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='privilage',
            unique_together={('user', 'database')},
        ),
        migrations.AddField(
            model_name='privilage',
            name='schema',
            field=models.CharField(default='public', max_length=1024, validators=[django.core.validators.RegexValidator(regex='^[a-z][a-z0-9_]*$')]),
        ),
        migrations.AlterField(
            model_name='privilage',
            name='tables',
            field=models.CharField(help_text='Comma-separated list of tables that can be accessed on this schema. "ALL TABLES" (without quotes) to allow access to all tables.', max_length=1024, validators=[django.core.validators.RegexValidator(regex='(([a-z][a-z0-9_]*,?)+(?<!,)$)|(^ALL TABLES$)')]),
        ),
        migrations.AlterUniqueTogether(
            name='privilage',
            unique_together={('user', 'database', 'schema')},
        ),
        migrations.AlterField(
            model_name='privilage',
            name='schema',
            field=models.CharField(default='public', max_length=1024, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z][a-zA-Z0-9_\\.]*$')]),
        ),
        migrations.AlterField(
            model_name='privilage',
            name='tables',
            field=models.CharField(help_text='Comma-separated list of tables that can be accessed on this schema. "ALL TABLES" (without quotes) to allow access to all tables.', max_length=1024, validators=[django.core.validators.RegexValidator(regex='(([a-zA-Z][a-zA-Z0-9_\\.]*,?)+(?<!,)$)|(^ALL TABLES$)')]),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sso_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('public_host', models.CharField(help_text='The leftmost part of the domain name of this application', max_length=63)),
                ('spawner', models.CharField(help_text='The spawner used to start the application', max_length=15)),
                ('spawner_application_template_options', models.CharField(help_text='The spawner options at the time the application instance was spawned', max_length=10240)),
                ('spawner_application_instance_id', models.CharField(help_text='An ID that the spawner understands to control and report on the application', max_length=128)),
                ('state', models.CharField(choices=[('SPAWNING', 'Spawning'), ('RUNNING', 'Running'), ('STOPPED', 'Stopped')], default='SPAWNING', max_length=16)),
                ('proxy_url', models.CharField(help_text='The URL that the proxy can proxy HTTP and WebSockets requests to', max_length=256)),
                ('single_running_or_spawning_integrity', models.CharField(help_text='Used internally to avoid duplicate running applications', max_length=63, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Used in URLs: only lowercase letters allowed', max_length=128, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-z]+$')])),
                ('nice_name', models.CharField(max_length=128, unique=True, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z0-9\\- ]+$')])),
                ('spawner', models.CharField(choices=[('PROCESS', 'Process')], default='PROCESS', max_length=10)),
                ('spawner_options', models.CharField(help_text='Options that the spawner understands to start the application', max_length=10240)),
            ],
        ),
        migrations.AddIndex(
            model_name='applicationtemplate',
            index=models.Index(fields=['name'], name='app_applica_name_76f0ef_idx'),
        ),
        migrations.AddField(
            model_name='applicationinstance',
            name='application_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.ApplicationTemplate'),
        ),
        migrations.AddField(
            model_name='applicationinstance',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='applicationinstance',
            index=models.Index(fields=['owner', 'created_date'], name='app_applica_owner_i_d86479_idx'),
        ),
        migrations.AddIndex(
            model_name='applicationinstance',
            index=models.Index(fields=['public_host', 'state'], name='app_applica_public__48682b_idx'),
        ),
        migrations.AlterModelOptions(
            name='applicationinstance',
            options={'permissions': [('start_all_applications', 'Can start all applications'), ('access_appstream', 'Can access appstream')]},
        ),
        migrations.AlterField(
            model_name='database',
            name='memorable_name',
            field=models.CharField(help_text='Must match the set of environment variables starting with DATA_DB__[memorable_name]__', max_length=128, unique=True, validators=[django.core.validators.RegexValidator(regex='[A-Za-z0-9_]')]),
        ),
        migrations.CreateModel(
            name='DataGrouping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('short_description', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('information_asset_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='asset_manager', to=settings.AUTH_USER_MODEL)),
                ('information_asset_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='asset_owner', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created+', to=settings.AUTH_USER_MODEL)),
                ('deleted', models.BooleanField(default=False)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('slug', models.SlugField()),
                ('short_description', models.CharField(max_length=256)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('description', models.TextField()),
                ('redactions', models.TextField(blank=True, null=True)),
                ('licence', models.CharField(blank=True, max_length=256, null=True)),
                ('volume', models.IntegerField()),
                ('retention_policy', models.TextField(blank=True, null=True)),
                ('personal_data', models.CharField(blank=True, max_length=128, null=True)),
                ('restrictions_on_usage', models.TextField(blank=True, null=True)),
                ('enquiries_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('grouping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataGrouping')),
                ('user_access_type', models.CharField(choices=[('REQUIRES_AUTHENTICATION', 'Requires authentication'), ('REQUIRES_AUTHORIZATION', 'Requires authorization')], default='REQUIRES_AUTHORIZATION', max_length=64)),
                ('published', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SourceLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Used as the displayed text in the download link', max_length=128)),
                ('url', models.CharField(max_length=256)),
                ('format', models.CharField(max_length=10)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('frequency', models.CharField(max_length=50)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataSet')),
                ('link_type', models.IntegerField(choices=[(1, 'External Link'), (2, 'Local Link')], default=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SourceSchema',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('schema', models.CharField(default='public', max_length=1024, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z][a-zA-Z0-9_\\.]*$')])),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataSet')),
                ('database', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='app.Database')),
            ],
        ),
        migrations.CreateModel(
            name='DataSetUserPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataSet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'dataset')},
            },
        ),
        migrations.DeleteModel(
            name='Privilage',
        ),
        migrations.CreateModel(
            name='SourceTable',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Used as the displayed text in the download link', max_length=1024)),
                ('schema', models.CharField(default='public', max_length=1024, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z][a-zA-Z0-9_\\.]*$')])),
                ('table', models.CharField(max_length=1024, validators=[django.core.validators.RegexValidator(regex='^[a-zA-Z][a-zA-Z0-9_\\.]*$')])),
                ('database', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='app.Database')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataSet')),
            ],
        ),
        migrations.DeleteModel(
            name='SourceSchema',
        ),
        migrations.CreateModel(
            name='ReferenceDataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField()),
                ('short_description', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('licence', models.CharField(blank=True, default='', max_length=256)),
                ('restrictions_on_usage', models.TextField(blank=True, null=True)),
                ('valid_from', models.DateField(blank=True, null=True)),
                ('valid_to', models.DateField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created+', to=settings.AUTH_USER_MODEL)),
                ('enquiries_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.DataGrouping')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated+', to=settings.AUTH_USER_MODEL)),
                ('published', models.BooleanField(default=False)),
                ('schema_version', models.IntegerField(default=0)),
                ('major_version', models.IntegerField(default=1)),
                ('minor_version', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Reference Data Set',
            },
        ),
        migrations.CreateModel(
            name='ReferenceDatasetField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('data_type', models.IntegerField(choices=[(1, 'Character field'), (2, 'Integer field'), (3, 'Float field'), (4, 'Date field'), (5, 'Time field'), (6, 'Datetime field'), (7, 'Boolean field')])),
                ('is_identifier', models.BooleanField(default=False, help_text='This field is the unique identifier for the record')),
                ('name', models.CharField(help_text='The display name for the field', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('required', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created+', to=settings.AUTH_USER_MODEL)),
                ('reference_dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='app.ReferenceDataset')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reference Data Set Field',
                'unique_together': {('reference_dataset', 'name')},
                'ordering': ('id',),
            },
        ),
        migrations.RunPython(
            code=fill_default_to_existing_records,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='sourcelink',
            name='link_type',
            field=models.IntegerField(choices=[(1, 'External Link'), (2, 'Local Link')], default=1),
        ),
    ]
